'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _es3ify = require('es3ify');

var _es3ify2 = _interopRequireDefault(_es3ify);

var _fsReaddirRecursive = require('fs-readdir-recursive');

var _fsReaddirRecursive2 = _interopRequireDefault(_fsReaddirRecursive);

var _lodash = require('lodash.flatten');

var _lodash2 = _interopRequireDefault(_lodash);

var _diff = require('diff');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transform = _es3ify2.default.transform;

var readFile = _bluebird2.default.promisify(_fs2.default.readFile);
var writeFile = _bluebird2.default.promisify(_fs2.default.writeFile);

exports.default = function () {
  var files = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var savePatchToDisk = _ref.savePatchToDisk;
  var directory = _ref.directory;

  var filesArray = (Array.isArray(files) ? files : [files]).map(function (filename) {
    if (_fs2.default.lstatSync(filename).isDirectory()) {
      return (0, _fsReaddirRecursive2.default)(filename).filter(function (file) {
        return _path2.default.extname(file) === '.js';
      }).map(function (file) {
        return _path2.default.join(filename, file);
      });
    }

    return filename;
  });

  return _bluebird2.default.map((0, _lodash2.default)(filesArray), function (filename) {
    return _bluebird2.default.props({ content: readFile(filename, 'utf-8'), filename: filename });
  }).map(function (_ref2) {
    var content = _ref2.content;
    var filename = _ref2.filename;

    var hash = _crypto2.default.createHash('md5').update(content).digest('hex');
    var es3Content = transform(content);
    var es3Hash = _crypto2.default.createHash('md5').update(es3Content).digest('hex');

    return _bluebird2.default.props({
      filename: filename,
      content: content,
      hash: hash,
      es3Content: es3Content,
      es3Hash: es3Hash
    });
  }).filter(function (_ref3) {
    var hash = _ref3.hash;
    var es3Hash = _ref3.es3Hash;
    return hash !== es3Hash;
  }).map(function (_ref4) {
    var filename = _ref4.filename;
    var content = _ref4.content;
    var es3Content = _ref4.es3Content;
    return _bluebird2.default.props({
      filename: filename,
      patch: (0, _diff.createPatch)(filename, content, es3Content),
      textDiff: (0, _diff.diffChars)(content, es3Content)
    });
  }).tap(function (arr) {
    if (savePatchToDisk) return arr.map(function (res) {
      return writeFile(_path2.default.join(directory, res.filename + '.patch'), res.patch);
    });

    return _bluebird2.default.resolve();
  });
};

module.exports = exports['default'];
