#!/usr/bin/env node
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _checkEs3Syntax = require('check-es3-syntax');

var _checkEs3Syntax2 = _interopRequireDefault(_checkEs3Syntax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var argv = _yargs2.default.demand(1, 'Must be called with at least one file').option('patch', {
  describe: 'print patch-file to disk',
  default: false,
  type: 'boolean'
}).option('d', {
  alias: 'directory',
  describe: 'if `file` is used, this sets a directory to write the files to. defaults to `process.cwd()`',
  type: 'string'
}).option('k', {
  alias: 'kill',
  describe: 'exit the process with -1 if differences are found',
  default: false,
  type: 'boolean'
}).option('p', {
  alias: 'print',
  describe: 'print a colorized diff to the console',
  default: false,
  type: 'boolean'
}).implies('directory', 'patch').help().alias('h', 'help').argv;

var colorize = function colorize(part) {
  if (part.added) return _chalk2.default.green(part.value);
  if (part.removed) return _chalk2.default.red(part.value);

  return _chalk2.default.grey(part.value);
};

(0, _checkEs3Syntax2.default)(argv._, {
  directory: argv.directory || process.cwd(),
  savePatchToDisk: argv.patch
}).tap(function (arr) {
  if (arr.length === 0) return;

  console.log('There are differences between input version and the ES3 version');

  if (!argv.print) {
    if (argv.patch) {
      console.log('Patch file written to disk');
    } else {
      console.log('Pass `-p` to the cli to print the difference, or `--patch` to create a patch file');
    }

    return;
  }

  var output = arr.map(function (_ref) {
    var textDiff = _ref.textDiff;

    var rest = _objectWithoutProperties(_ref, ['textDiff']);

    var text = textDiff.reduce(function (memo, part) {
      return '' + memo + colorize(part);
    }, '');

    return _extends({}, rest, {
      text: text
    });
  }).reduce(function (memo, _ref2) {
    var filename = _ref2.filename;
    var text = _ref2.text;
    return '' + memo + _path2.default.resolve(filename) + '\n' + text + '\n\n';
  }, '').trim();

  console.log(output);
}).tap(function (arr) {
  if (argv.kill && arr.length > 0) process.exit(-1);
}).catch(function (e) {
  console.error(e);
  process.exit(-1);
});
